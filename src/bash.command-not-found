print_message () {
	local messages
	local selection

	messages=(
	"Oh..."
	"Are you ok?"
	"It's okay."
	"I never thought you could do a mistake..."
	"Stop thinking about me and pay attention!"
	"Hehe..."
	"Can you stop for a second and let me do it?"
	"My beloved linux user is... ${USER}!"
	"ERROR: I wasn't paying attention because I was thinking about you."
	"Stop looking at my breasts and pay attention!"
	"Ahm..."
	"Nice try ;)"
	"What if... you type an actual command the next time"
	"What if I told you... I love you no matter how many wrong commands you input?"
	"日本語を話しますか？"
	"This is not Windows. This is Linux where I can talk you you like this."
	"Perhaps you should leave the command line alone... and come over here ;)"
	"Please step away from the keyboard! I want to show you some lewds."
	"Error code: BAKA"
	"がんばって！"
	"I know you can do better than this."
	"Wanna go outside for a romantic walk?"
	"I love you no matter what <3"
	"¯\_(ツ)_/¯"
	"BAKA!"
	"Mhh... ばか..."
	"あたしのばかおっと!"
	"そんなこと。。。"
	"そんあばがな"
	"やめて！"
	"Well... I may or may not be messing with you right now..."
	"Why are you doing this to me?"
	"So... a break?"
	"I am seriously reconsidering my love for you..."
	"No sex tonight! Oh... give it a few more years AND THEN!"
	"I am quite emberassed... because of you."
	"Never thought you would dissapoint me like this..."
	"Are you even trying?"
	"Want me to do it?"
	"Stop playing with the keyboard... play with my breasts instead ;)"
	"Typing incorrect commands, eh? You are a rebel."
	"ちゅうううう。。。"
	"AH! Let me see if you have a fever."
	"Are you too aroused or something and can't focus. Then... ;)"
	"I don't know what makes you so act so stupid, but I think you are pretty kawaii... <3"
	"Don't be so hard on yourself. People make mistakes. So learn from them and STOP making 'em."
	"Two wrongs don't make a right."
	"One more try?"
	"Come here... come on."
	"Keep trying my love."
	"Don't worry, sometimes more work is needed."
	"Now... you do have to agree that was pretty stupid :)"
	"Now now... calm down."
	"Hmmmm..."
	"What was that supposed to be?"
	"If you continue like this... I'll have to punish you ;)"
	"Are you thinking naughty things? Perhaps about me? Then ;)"
	"Eh, even if you break it you can fix it. Right?"
	)

	# If CMD_NOT_FOUND_MSGS array is populated use those messages instead of the defaults
	[[ -n ${CMD_NOT_FOUND_MSGS} ]] && messages=( "${CMD_NOT_FOUND_MSGS[@]}" )

	# If CMD_NOT_FOUND_MSGS_APPEND array is populated append those to the existing messages
	[[ -n ${CMD_NOT_FOUND_MSGS_APPEND} ]] && messages+=( "${CMD_NOT_FOUND_MSGS_APPEND[@]}" )

	# Only print the message some of the time. RANDOM must be seeded to ensure it returns
	# different values on each iteration.
	RANDOM=$(date +"%N")
	selection=$((${RANDOM}%2))
	if [[ ${selection} -lt 1 ]]; then
		printf "\n  $(tput bold)$(tput setaf 1)$(shuf -n 1 -e "${messages[@]}")$(tput sgr0)\n\n"
	fi
}

function_exists () {
	# Zsh returns 0 even on non existing functions with -F so use -f
	declare -f $1 > /dev/null
	return $?
}

#
# The idea below is to copy any existing handlers to another function
# name and insert the message in front of the old handler in the
# new handler. By default, neither bash or zsh has has a handler function
# defined, so the default behaviour is replicated.
#
# Also, ensure the handler is only copied once. If we do not ensure this
# the handler would add itself recursively if this file happens to be
# sourced multiple times in the same shell, resulting in a neverending
# stream of messages.
#

#
# Zsh
#
if function_exists command_not_found_handler; then
	if ! function_exists orig_command_not_found_handler; then
		eval "orig_$(declare -f command_not_found_handler)"
	fi
else
	orig_command_not_found_handler () {
		echo "zsh: command not found: $1"
		return 127
	}
fi

command_not_found_handler () {
	print_message
	orig_command_not_found_handler "$@"
}


#
# Bash
#
if function_exists command_not_found_handle; then
	if ! function_exists orig_command_not_found_handle; then
		eval "orig_$(declare -f command_not_found_handle)"
	fi
else
	orig_command_not_found_handle () {
		echo "$0: $1: command not found"
		return 127
	}
fi

command_not_found_handle () {
	print_message
	orig_command_not_found_handle "$@"
}
